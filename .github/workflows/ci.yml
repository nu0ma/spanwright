name: CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      
    - name: Setup pnpm
      uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      with:
        version: 10.15.0
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        
    - name: Read Go version
      id: go-version
      run: echo "version=$(grep '^go ' .tool-versions | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
    - name: Setup Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
      with:
        go-version: ${{ steps.go-version.outputs.version }}
        cache: true
        
    - name: Install wrench
      run: go install github.com/cloudspannerecosystem/wrench@latest
      
    - name: Install spalidate
      run: go install github.com/nu0ma/spalidate@latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build project
      run: pnpm run build
      
    - name: Run unit tests
      run: pnpm run test:unit
      
    - name: Install Playwright with system dependencies
      run: npx playwright install --with-deps
      
    - name: Run E2E tests with real CLI
      run: pnpm test
      
    - name: Check TypeScript compilation
      run: npx tsc --noEmit
      
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      
    - name: Setup pnpm
      uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '22.x'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run linting
      run: pnpm run lint
      
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      
    - name: Setup pnpm
      uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '22.x'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build project
      run: pnpm run build
      
    - name: Create temporary schema files for testing
      run: |
        mkdir -p /tmp/test-schemas/{primary,secondary}
        echo "CREATE TABLE TestTable (ID STRING(36) NOT NULL) PRIMARY KEY (ID);" > /tmp/test-schemas/primary/001_schema.sql
        echo "CREATE TABLE LogTable (ID STRING(36) NOT NULL) PRIMARY KEY (ID);" > /tmp/test-schemas/secondary/001_schema.sql
        
    - name: Test CLI installation
      run: |
        # Test CLI directly with node
        node dist/index.js --help
        
    - name: Test project generation with real CLI
      run: |
        mkdir test-output
        cd test-output
        
        # Test project generation in non-interactive mode with real schemas
        env SPANWRIGHT_DB_COUNT=2 \
            SPANWRIGHT_PRIMARY_DB_NAME=test-primary \
            SPANWRIGHT_PRIMARY_SCHEMA_PATH=/tmp/test-schemas/primary \
            SPANWRIGHT_SECONDARY_DB_NAME=test-secondary \
            SPANWRIGHT_SECONDARY_SCHEMA_PATH=/tmp/test-schemas/secondary \
            CI=true \
            node ../dist/index.js test-project
        
        # Verify project structure was created
        if [ ! -d "test-project" ]; then
          echo "❌ Project directory was not created"
          exit 1
        fi
        
        echo "✅ Project directory created successfully"
        ls -la test-project/
        
        # Verify essential files exist
        essential_files=(
          "test-project/Makefile"
          "test-project/go.mod"
          "test-project/.env"
          "test-project/playwright.config.ts"
          "test-project/cmd/seed-injector/main.go"
        )
        
        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Essential file missing: $file"
            exit 1
          fi
          echo "✅ Found: $file"
        done
        
        echo "✅ All essential files verified"

  generated-project-test:
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      
    - name: Setup pnpm
      uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '22.x'
        cache: 'pnpm'
        
    - name: Read Go version
      id: go-version-2
      run: echo "version=$(grep '^go ' .tool-versions | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
    - name: Setup Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
      with:
        go-version: ${{ steps.go-version-2.outputs.version }}
        cache: true
        
    - name: Install wrench
      run: go install github.com/cloudspannerecosystem/wrench@latest
      
    - name: Install spalidate
      run: go install github.com/nu0ma/spalidate@latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build CLI
      run: pnpm run build
      
    - name: Verify CLI build
      run: |
        # Test CLI directly with node
        node dist/index.js --help
        
    - name: Create test schemas for E2E project
      run: |
        mkdir -p /tmp/e2e-schemas/{primary,secondary}
        cat > /tmp/e2e-schemas/primary/001_schema.sql << 'EOF'
        CREATE TABLE Users (
          UserID STRING(36) NOT NULL,
          Name STRING(255) NOT NULL,
          Email STRING(255) NOT NULL,
          Status INT64 NOT NULL,
          CreatedAt TIMESTAMP NOT NULL
        ) PRIMARY KEY (UserID);
        EOF
        
        cat > /tmp/e2e-schemas/secondary/001_schema.sql << 'EOF'
        CREATE TABLE Analytics (
          AnalyticsID STRING(36) NOT NULL,
          UserID STRING(36) NOT NULL,
          EventType STRING(100) NOT NULL,
          PageURL STRING(500),
          Timestamp TIMESTAMP NOT NULL
        ) PRIMARY KEY (AnalyticsID);
        EOF
    
    - name: Generate test project
      run: |
        mkdir generated-project-test
        cd generated-project-test
        
        # Generate project with 2 databases in non-interactive mode with real schemas
        env SPANWRIGHT_DB_COUNT=2 \
            SPANWRIGHT_PRIMARY_DB_NAME=test-primary \
            SPANWRIGHT_PRIMARY_SCHEMA_PATH=/tmp/e2e-schemas/primary \
            SPANWRIGHT_SECONDARY_DB_NAME=test-secondary \
            SPANWRIGHT_SECONDARY_SCHEMA_PATH=/tmp/e2e-schemas/secondary \
            CI=true \
            node ../dist/index.js test-e2e-project
        
        cd test-e2e-project
        echo "📁 Generated project structure:"
        find . -type f -name "*.go" -o -name "*.ts" -o -name "Makefile" -o -name "*.env" | head -20
        
    - name: Test Go compilation
      run: |
        cd generated-project-test/test-e2e-project
        
        # Test Go modules and compilation
        echo "🔧 Testing Go module setup..."
        go mod tidy
        go mod verify
        
        echo "🔨 Testing Go compilation..."
        go build ./cmd/seed-injector/
        
        echo "✅ Go compilation successful"
        
    - name: Test TypeScript compilation
      run: |
        cd generated-project-test/test-e2e-project
        
        echo "🔧 Installing Node.js dependencies..."
        pnpm install
        
        echo "🔨 Testing TypeScript compilation..."
        npx tsc --noEmit
        
        echo "✅ TypeScript compilation successful"
        
    - name: Install Playwright in generated project
      run: |
        cd generated-project-test/test-e2e-project
        pnpm install
        npx playwright install --with-deps
        
    - name: Test basic project setup
      run: |
        cd generated-project-test/test-e2e-project
        
        echo "🧪 Testing project setup commands..."
        
        # Test help command
        make help || echo "Help command tested"
        
        # Test prerequisite check
        make check-tools || echo "Prerequisites checked"
        
        echo "✅ Basic project setup verified"

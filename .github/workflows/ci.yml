name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22.x'

jobs:
  # Fast feedback job for quick checks
  fast-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Record start time
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV
      
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Check TypeScript compilation
      run: npx tsc --noEmit
      
    - name: Build project
      run: npm run build
      
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
        
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Calculate and report fast-checks duration
      run: |
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "⏱️ Fast checks completed in ${DURATION}s"
        echo "FAST_CHECKS_DURATION=${DURATION}" >> $GITHUB_ENV

  # Main test job with E2E tests
  test:
    runs-on: ubuntu-latest
    needs: fast-checks
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
        
    - name: Read Go version
      id: go-version
      run: echo "version=$(grep '^go ' .tool-versions | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ steps.go-version.outputs.version }}
        cache: true
        cache-dependency-path: |
          go.sum
          template/go.mod.template
        
    - name: Cache Go tools
      uses: actions/cache@v4
      with:
        path: ~/go/bin
        key: ${{ runner.os }}-go-tools-${{ steps.go-version.outputs.version }}-v1
        restore-keys: |
          ${{ runner.os }}-go-tools-${{ steps.go-version.outputs.version }}-
          ${{ runner.os }}-go-tools-
        
    - name: Install Go tools
      run: |
        if [ ! -f ~/go/bin/wrench ]; then
          go install github.com/cloudspannerecosystem/wrench@latest
        fi
        if [ ! -f ~/go/bin/spalidate ]; then
          go install github.com/nu0ma/spalidate@latest
        fi
        
    - name: Install dependencies
      run: npm ci
      
    - name: Restore build artifacts
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
        
    - name: Get Playwright version
      id: playwright-version
      run: echo "version=$(npm list @playwright/test --depth=0 --json 2>/dev/null | jq -r '.dependencies["@playwright/test"].version // "latest"')" >> $GITHUB_OUTPUT
      
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
        restore-keys: |
          ${{ runner.os }}-playwright-
        
    - name: Install Playwright with system dependencies
      run: npx playwright install --with-deps
      
    - name: Run E2E tests with real CLI
      run: |
        echo "🧪 Starting E2E tests..."
        START_E2E=$(date +%s)
        npm test
        END_E2E=$(date +%s)
        E2E_DURATION=$((END_E2E - START_E2E))
        echo "⏱️ E2E tests completed in ${E2E_DURATION}s"
      
  # Build and CLI tests (parallel with main test)
  build-test:
    runs-on: ubuntu-latest
    needs: fast-checks
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
        
    - name: Install dependencies
      run: npm ci
      
    - name: Restore build artifacts
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
      
    - name: Create temporary schema files for testing
      run: |
        mkdir -p /tmp/test-schemas/{primary,secondary}
        echo "CREATE TABLE TestTable (ID STRING(36) NOT NULL) PRIMARY KEY (ID);" > /tmp/test-schemas/primary/001_schema.sql
        echo "CREATE TABLE LogTable (ID STRING(36) NOT NULL) PRIMARY KEY (ID);" > /tmp/test-schemas/secondary/001_schema.sql
        
    - name: Test CLI installation
      run: |
        # Install CLI from built files
        npm install -g .
        spanwright --help || echo "CLI help not available yet"
        
    - name: Test project generation with real CLI
      run: |
        mkdir test-output
        cd test-output
        
        # Test project generation in non-interactive mode with real schemas
        env SPANWRIGHT_DB_COUNT=2 \
            SPANWRIGHT_PRIMARY_DB_NAME=test-primary \
            SPANWRIGHT_PRIMARY_SCHEMA_PATH=/tmp/test-schemas/primary \
            SPANWRIGHT_SECONDARY_DB_NAME=test-secondary \
            SPANWRIGHT_SECONDARY_SCHEMA_PATH=/tmp/test-schemas/secondary \
            CI=true \
            spanwright test-project
        
        # Verify project structure was created
        if [ ! -d "test-project" ]; then
          echo "❌ Project directory was not created"
          exit 1
        fi
        
        echo "✅ Project directory created successfully"
        ls -la test-project/
        
        # Verify essential files exist
        essential_files=(
          "test-project/Makefile"
          "test-project/go.mod"
          "test-project/.env"
          "test-project/playwright.config.ts"
          "test-project/cmd/seed-injector/main.go"
        )
        
        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Essential file missing: $file"
            exit 1
          fi
          echo "✅ Found: $file"
        done
        
        echo "✅ All essential files verified"

  # Generated project comprehensive tests
  generated-project-test:
    runs-on: ubuntu-latest
    needs: [fast-checks, build-test]
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
        
    - name: Read Go version
      id: go-version
      run: echo "version=$(grep '^go ' .tool-versions | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ steps.go-version.outputs.version }}
        cache: true
        cache-dependency-path: |
          go.sum
          template/go.mod.template
        
    - name: Cache Go tools
      uses: actions/cache@v4
      with:
        path: ~/go/bin
        key: ${{ runner.os }}-go-tools-${{ steps.go-version.outputs.version }}-v1
        restore-keys: |
          ${{ runner.os }}-go-tools-${{ steps.go-version.outputs.version }}-
          ${{ runner.os }}-go-tools-
        
    - name: Install Go tools
      run: |
        if [ ! -f ~/go/bin/wrench ]; then
          go install github.com/cloudspannerecosystem/wrench@latest
        fi
        if [ ! -f ~/go/bin/spalidate ]; then
          go install github.com/nu0ma/spalidate@latest
        fi
        
    - name: Install dependencies
      run: npm ci
      
    - name: Restore build artifacts
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
      
    - name: Install CLI globally
      run: |
        # Install CLI from built files
        npm install -g .
        
    - name: Create test schemas for E2E project
      run: |
        mkdir -p /tmp/e2e-schemas/{primary,secondary}
        cat > /tmp/e2e-schemas/primary/001_schema.sql << 'EOF'
        CREATE TABLE Users (
          UserID STRING(36) NOT NULL,
          Name STRING(255) NOT NULL,
          Email STRING(255) NOT NULL,
          Status INT64 NOT NULL,
          CreatedAt TIMESTAMP NOT NULL
        ) PRIMARY KEY (UserID);
        EOF
        
        cat > /tmp/e2e-schemas/secondary/001_schema.sql << 'EOF'
        CREATE TABLE Analytics (
          AnalyticsID STRING(36) NOT NULL,
          UserID STRING(36) NOT NULL,
          EventType STRING(100) NOT NULL,
          PageURL STRING(500),
          Timestamp TIMESTAMP NOT NULL
        ) PRIMARY KEY (AnalyticsID);
        EOF
    
    - name: Generate test project
      run: |
        mkdir generated-project-test
        cd generated-project-test
        
        # Generate project with 2 databases in non-interactive mode with real schemas
        env SPANWRIGHT_DB_COUNT=2 \
            SPANWRIGHT_PRIMARY_DB_NAME=test-primary \
            SPANWRIGHT_PRIMARY_SCHEMA_PATH=/tmp/e2e-schemas/primary \
            SPANWRIGHT_SECONDARY_DB_NAME=test-secondary \
            SPANWRIGHT_SECONDARY_SCHEMA_PATH=/tmp/e2e-schemas/secondary \
            CI=true \
            spanwright test-e2e-project
        
        cd test-e2e-project
        echo "📁 Generated project structure:"
        find . -type f -name "*.go" -o -name "*.ts" -o -name "Makefile" -o -name "*.env" | head -20
        
    - name: Test Go compilation
      run: |
        cd generated-project-test/test-e2e-project
        
        # Test Go modules and compilation
        echo "🔧 Testing Go module setup..."
        go mod tidy
        go mod verify
        
        echo "🔨 Testing Go compilation..."
        go build ./cmd/seed-injector/
        
        echo "✅ Go compilation successful"
        
    - name: Test TypeScript compilation
      run: |
        cd generated-project-test/test-e2e-project
        
        echo "🔧 Installing Node.js dependencies..."
        npm install
        
        echo "🔨 Testing TypeScript compilation..."
        npx tsc --noEmit
        
        echo "✅ TypeScript compilation successful"
        
    - name: Get Playwright version for generated project
      id: playwright-version-gen
      run: |
        cd generated-project-test/test-e2e-project
        npm install
        echo "version=$(npm list @playwright/test --depth=0 --json 2>/dev/null | jq -r '.dependencies["@playwright/test"].version // "latest"')" >> $GITHUB_OUTPUT
        
    - name: Cache Playwright browsers for generated project
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright-version-gen.outputs.version }}
        restore-keys: |
          ${{ runner.os }}-playwright-
        
    - name: Install Playwright in generated project
      run: |
        cd generated-project-test/test-e2e-project
        npx playwright install --with-deps
        
    - name: Test basic project setup
      run: |
        cd generated-project-test/test-e2e-project
        
        echo "🧪 Testing project setup commands..."
        
        # Test help command
        make help || echo "Help command tested"
        
        # Test prerequisite check
        make check-tools || echo "Prerequisites checked"
        
        echo "✅ Basic project setup verified"
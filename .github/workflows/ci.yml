name: CI

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  e2e:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      
    - name: Setup Node.js and pnpm
      uses: ./.github/actions/setup-node-pnpm
        
    - name: Read Go version
      id: go-version
      run: echo "version=$(grep '^go ' .tool-versions | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      
    - name: Setup Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
      with:
        go-version: ${{ steps.go-version.outputs.version }}
        cache: true
        
    - name: Cache Go binaries
      uses: actions/cache@v4
      id: cache-go-binaries
      with:
        path: |
          ~/.cache/go-build
          ~/go/bin
        key: ${{ runner.os }}-go${{ steps.go-version.outputs.version }}-binaries-wrench-spalidate-v1
        restore-keys: |
          ${{ runner.os }}-go${{ steps.go-version.outputs.version }}-binaries-
        
    - name: Install Go tools
      if: steps.cache-go-binaries.outputs.cache-hit != 'true'
      run: |
        echo "Installing Go tools..."
        go install github.com/cloudspannerecosystem/wrench@latest
        go install github.com/nu0ma/spalidate@latest
        
    - name: Verify Go tools
      run: |
        export PATH=$PATH:~/go/bin
        wrench --version && spalidate --version
        echo "✅ Go tools ready"
        
    - name: Build project
      run: pnpm run build
      
    - name: Run unit tests
      run: pnpm run test:unit
      
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: cache-playwright
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-chromium-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-playwright-chromium-

    - name: Install Playwright with system dependencies
      if: steps.cache-playwright.outputs.cache-hit != 'true'
      run: npx playwright install --with-deps chromium
      
    - name: Install Playwright (cache hit)
      if: steps.cache-playwright.outputs.cache-hit == 'true'
      run: npx playwright install-deps chromium
      
    - name: Run E2E tests with real CLI
      run: pnpm run test:unit && pnpm run test:e2e
      
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      
    - name: Setup Node.js and pnpm
      uses: ./.github/actions/setup-node-pnpm
      
    - name: Run linting
      run: pnpm run lint
      
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
      
    - name: Setup Node.js and pnpm
      uses: ./.github/actions/setup-node-pnpm

    - name: Build project
      run: pnpm run build
      
    - name: Create temporary schema files for testing
      run: |
        mkdir -p /tmp/test-schemas/{primary,secondary}
        echo "CREATE TABLE TestTable (ID STRING(36) NOT NULL) PRIMARY KEY (ID);" > /tmp/test-schemas/primary/001_schema.sql
        echo "CREATE TABLE LogTable (ID STRING(36) NOT NULL) PRIMARY KEY (ID);" > /tmp/test-schemas/secondary/001_schema.sql
        
    - name: Test CLI installation
      run: |
        # Test CLI directly with node
        node dist/index.js --help
        
    - name: Test project generation with real CLI
      run: |
        mkdir test-output
        cd test-output
        
        # Test project generation in non-interactive mode with real schemas
        env SPANWRIGHT_DB_COUNT=2 \
            SPANWRIGHT_PRIMARY_DB_NAME=test-primary \
            SPANWRIGHT_PRIMARY_SCHEMA_PATH=/tmp/test-schemas/primary \
            SPANWRIGHT_SECONDARY_DB_NAME=test-secondary \
            SPANWRIGHT_SECONDARY_SCHEMA_PATH=/tmp/test-schemas/secondary \
            CI=true \
            node ../dist/index.js test-project
        
        # Verify project structure was created
        if [ ! -d "test-project" ]; then
          echo "❌ Project directory was not created"
          exit 1
        fi
        
        echo "✅ Project directory created successfully"
        ls -la test-project/
        
        # Verify essential files exist
        essential_files=(
          "test-project/Makefile"
          "test-project/go.mod"
          "test-project/.env"
          "test-project/playwright.config.ts"
          "test-project/cmd/seed-injector/main.go"
        )
        
        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Essential file missing: $file"
            exit 1
          fi
          echo "✅ Found: $file"
        done
        
        echo "✅ Generated project successfully"
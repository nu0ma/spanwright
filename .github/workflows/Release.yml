name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    permissions:
      contents: write # to create release
      pull-requests: write # to create release PR
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      release_tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Run Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: node
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.PAT }}

  npm-publish:
    name: Publish to NPM
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
          
      - name: Read Go version
        id: go-version
        run: echo "version=$(grep '^go ' .tool-versions | cut -d' ' -f2)" >> $GITHUB_OUTPUT
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true
          
      - name: Install wrench
        run: go install github.com/cloudspannerecosystem/wrench@latest
        
      - name: Install spalidate
        run: go install github.com/nu0ma/spalidate@latest
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Verify dependency integrity
        run: pnpm audit signatures
        
      - name: Build project
        run: pnpm run build
        
      - name: Install Playwright with system dependencies
        run: npx playwright install --with-deps
        
      - name: Run tests
        run: pnpm test
        
      - name: Run linting
        run: pnpm run lint
        
      - name: Check TypeScript compilation
        run: npx tsc --noEmit
        
      - name: Publish to NPM
        run: pnpm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
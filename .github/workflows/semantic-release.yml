name: Release

on:
  push:
    branches:
      - main

env:
  NODE_VERSION: '22.x'

permissions:
  contents: read # for checkout

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
          
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
          
      - name: Read Go version
        id: go-version
        run: echo "version=$(grep '^go ' .tool-versions | cut -d' ' -f2)" >> $GITHUB_OUTPUT
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true
          cache-dependency-path: |
            go.sum
            template/go.mod.template
        
      - name: Cache Go tools
        uses: actions/cache@v4
        with:
          path: ~/go/bin
          key: ${{ runner.os }}-go-tools-${{ steps.go-version.outputs.version }}-v1
          restore-keys: |
            ${{ runner.os }}-go-tools-${{ steps.go-version.outputs.version }}-
            ${{ runner.os }}-go-tools-
        
      - name: Install Go tools
        run: |
          if [ ! -f ~/go/bin/wrench ]; then
            go install github.com/cloudspannerecosystem/wrench@latest
          fi
          if [ ! -f ~/go/bin/spalidate ]; then
            go install github.com/nu0ma/spalidate@latest
          fi
        
      - name: Install dependencies
        run: npm clean-install
        
      - name: Verify dependency integrity
        run: npm audit signatures
        
      - name: Build project
        run: npm run build
        
      - name: Run linting
        run: npm run lint
        
      - name: Check TypeScript compilation
        run: npx tsc --noEmit
        
      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json 2>/dev/null | jq -r '.dependencies["@playwright/test"].version // "latest"')" >> $GITHUB_OUTPUT
        
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-
        
      - name: Install Playwright with system dependencies
        run: npx playwright install --with-deps
        
      - name: Run tests
        run: npm test
        
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release